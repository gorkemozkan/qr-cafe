name: Feature to Staging

on:
  pull_request:
    types: [closed]
    branches:
      - staging

jobs:
  feature-release:
    if: github.event.pull_request.merged == true && github.event.pull_request.head.ref != 'staging'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Get current version
        id: current-version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Determine version increment
        id: version-increment
        run: |
          # Extract version numbers
          CURRENT_MAJOR=$(echo ${{ steps.current-version.outputs.version }} | cut -d. -f1)
          CURRENT_MINOR=$(echo ${{ steps.current-version.outputs.version }} | cut -d. -f2)
          CURRENT_PATCH=$(echo ${{ steps.current-version.outputs.version }} | cut -d. -f3)
          
          # Remove staging suffix if present
          CURRENT_PATCH=$(echo $CURRENT_PATCH | sed 's/-staging//')
          
          # For feature branches merged to staging, increment patch version
          NEW_PATCH=$((CURRENT_PATCH + 1))
          NEW_VERSION="${CURRENT_MAJOR}.${CURRENT_MINOR}.${NEW_PATCH}-staging"
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "feature_branch=${{ github.event.pull_request.head.ref }}" >> $GITHUB_OUTPUT

      - name: Update package.json version
        run: |
          npm version ${{ steps.version-increment.outputs.new_version }} --no-git-tag-version

      - name: Create Staging Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version-increment.outputs.new_version }}
          release_name: Feature Release v${{ steps.version-increment.outputs.new_version }}
          body: |
            ## Feature Release v${{ steps.version-increment.outputs.new_version }}
            
            ðŸš€ New feature from branch: `${{ steps.version-increment.outputs.feature_branch }}`
            
            ### Feature Details
            - **Branch**: ${{ steps.version-increment.outputs.feature_branch }}
            - **PR**: #${{ github.event.pull_request.number }}
            - **Title**: ${{ github.event.pull_request.title }}
            
            ### Changes
            ${{ github.event.pull_request.body }}
            
            ### Installation
            ```bash
            git checkout v${{ steps.version-increment.outputs.new_version }}
            npm install
            ```
            
            ### Testing
            This is a staging release for testing the new feature.
          draft: false
          prerelease: true

      - name: Commit version bump
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json package-lock.json
          git commit -m "Bump version to ${{ steps.version-increment.outputs.new_version }} for feature ${{ steps.version-increment.outputs.feature_branch }} [skip ci]"
          git push origin staging
