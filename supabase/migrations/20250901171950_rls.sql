create table "public"."cafes" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid,
    "slug" text not null,
    "description" text,
    "currency" "Currency" default 'TRY'::"Currency",
    "is_active" boolean not null default true,
    "logo_url" text
);


alter table "public"."cafes" enable row level security;

create table "public"."categories" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "cafe_id" bigint not null,
    "name" text not null,
    "description" text not null,
    "sort_order" smallint,
    "is_active" boolean not null default true,
    "user_id" uuid not null
);


alter table "public"."categories" enable row level security;

create table "public"."products" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "cafe_id" bigint not null,
    "category_id" bigint not null,
    "name" text not null,
    "description" text,
    "price" numeric,
    "image_url" text,
    "is_available" boolean not null default true,
    "user_id" uuid not null
);


alter table "public"."products" enable row level security;

CREATE UNIQUE INDEX cafes_pkey ON public.cafes USING btree (id);

CREATE UNIQUE INDEX categories_pkey ON public.categories USING btree (id);

CREATE UNIQUE INDEX products_pkey ON public.products USING btree (id);

alter table "public"."cafes" add constraint "cafes_pkey" PRIMARY KEY using index "cafes_pkey";

alter table "public"."categories" add constraint "categories_pkey" PRIMARY KEY using index "categories_pkey";

alter table "public"."products" add constraint "products_pkey" PRIMARY KEY using index "products_pkey";

alter table "public"."cafes" add constraint "cafes_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."cafes" validate constraint "cafes_user_id_fkey";

alter table "public"."categories" add constraint "categories_cafe_id_fkey" FOREIGN KEY (cafe_id) REFERENCES cafes(id) not valid;

alter table "public"."categories" validate constraint "categories_cafe_id_fkey";

alter table "public"."categories" add constraint "categories_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."categories" validate constraint "categories_user_id_fkey";

alter table "public"."products" add constraint "products_cafe_id_fkey" FOREIGN KEY (cafe_id) REFERENCES cafes(id) not valid;

alter table "public"."products" validate constraint "products_cafe_id_fkey";

alter table "public"."products" add constraint "products_category_id_fkey" FOREIGN KEY (category_id) REFERENCES categories(id) not valid;

alter table "public"."products" validate constraint "products_category_id_fkey";

alter table "public"."products" add constraint "products_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."products" validate constraint "products_user_id_fkey";

grant delete on table "public"."cafes" to "anon";

grant insert on table "public"."cafes" to "anon";

grant references on table "public"."cafes" to "anon";

grant select on table "public"."cafes" to "anon";

grant trigger on table "public"."cafes" to "anon";

grant truncate on table "public"."cafes" to "anon";

grant update on table "public"."cafes" to "anon";

grant delete on table "public"."cafes" to "authenticated";

grant insert on table "public"."cafes" to "authenticated";

grant references on table "public"."cafes" to "authenticated";

grant select on table "public"."cafes" to "authenticated";

grant trigger on table "public"."cafes" to "authenticated";

grant truncate on table "public"."cafes" to "authenticated";

grant update on table "public"."cafes" to "authenticated";

grant delete on table "public"."cafes" to "service_role";

grant insert on table "public"."cafes" to "service_role";

grant references on table "public"."cafes" to "service_role";

grant select on table "public"."cafes" to "service_role";

grant trigger on table "public"."cafes" to "service_role";

grant truncate on table "public"."cafes" to "service_role";

grant update on table "public"."cafes" to "service_role";

grant delete on table "public"."categories" to "anon";

grant insert on table "public"."categories" to "anon";

grant references on table "public"."categories" to "anon";

grant select on table "public"."categories" to "anon";

grant trigger on table "public"."categories" to "anon";

grant truncate on table "public"."categories" to "anon";

grant update on table "public"."categories" to "anon";

grant delete on table "public"."categories" to "authenticated";

grant insert on table "public"."categories" to "authenticated";

grant references on table "public"."categories" to "authenticated";

grant select on table "public"."categories" to "authenticated";

grant trigger on table "public"."categories" to "authenticated";

grant truncate on table "public"."categories" to "authenticated";

grant update on table "public"."categories" to "authenticated";

grant delete on table "public"."categories" to "service_role";

grant insert on table "public"."categories" to "service_role";

grant references on table "public"."categories" to "service_role";

grant select on table "public"."categories" to "service_role";

grant trigger on table "public"."categories" to "service_role";

grant truncate on table "public"."categories" to "service_role";

grant update on table "public"."categories" to "service_role";

grant delete on table "public"."products" to "anon";

grant insert on table "public"."products" to "anon";

grant references on table "public"."products" to "anon";

grant select on table "public"."products" to "anon";

grant trigger on table "public"."products" to "anon";

grant truncate on table "public"."products" to "anon";

grant update on table "public"."products" to "anon";

grant delete on table "public"."products" to "authenticated";

grant insert on table "public"."products" to "authenticated";

grant references on table "public"."products" to "authenticated";

grant select on table "public"."products" to "authenticated";

grant trigger on table "public"."products" to "authenticated";

grant truncate on table "public"."products" to "authenticated";

grant update on table "public"."products" to "authenticated";

grant delete on table "public"."products" to "service_role";

grant insert on table "public"."products" to "service_role";

grant references on table "public"."products" to "service_role";

grant select on table "public"."products" to "service_role";

grant trigger on table "public"."products" to "service_role";

grant truncate on table "public"."products" to "service_role";

grant update on table "public"."products" to "service_role";

create policy "Enable delete for users based on user_id"
on "public"."cafes"
as permissive
for delete
to public
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable insert for authenticated users only"
on "public"."cafes"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable users to view their own data only"
on "public"."cafes"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable delete for users based on user_id"
on "public"."categories"
as permissive
for delete
to public
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable insert for authenticated users only"
on "public"."categories"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable insert for users based on user_id"
on "public"."categories"
as permissive
for insert
to public
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable users to view their own data only"
on "public"."categories"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable delete for users based on user_id"
on "public"."products"
as permissive
for delete
to public
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable insert for authenticated users only"
on "public"."products"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable insert for users based on user_id"
on "public"."products"
as permissive
for insert
to public
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable users to view their own data only"
on "public"."products"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));




